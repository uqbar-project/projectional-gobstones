package GsInspectorPresenter.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class ExtractProcedure_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ExtractProcedure_Intention() {
    super(MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a750c1L, "MPSGobstones.structure.Statement"), IntentionType.NORMAL, true, new SNodePointer("r:0edf499d-fcd0-4438-b54a-029b3ba9e6af(GsInspectorPresenter.intentions)", "6035600022474186162"));
  }
  @Override
  public String getPresentation() {
    return "ExtractProcedure";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return true;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ExtractProcedure_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Extraer Comandos";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode routineDeclaration = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x332b7c31ccbf9e41L, "MPSGobstones.structure.ProcedureDeclaration")), null);
      List<SNode> selectedNodes = editorContext.getSelectedNodes();
      ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a58e1dL, "MPSGobstones.structure.Program"), true, false), MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a58e1dL, 0x332b7c31ccbfa9d9L, "routines"))).addElement(routineDeclaration);
      SNode call = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x332b7c31ccc227d8L, "MPSGobstones.structure.ProcedureInvocation")));
      SLinkOperations.setTarget(call, MetaAdapterFactory.getReferenceLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4fa27ddL, 0x7f13d3cac4fdc2a0L, "declaration"), routineDeclaration);
      SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(selectedNodes).first(), call);
      for (SNode selectedNode : ListSequence.fromList(selectedNodes)) {
        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(routineDeclaration, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x332b7c31ccbf9e41L, 0x332b7c31ccbf9e22L, "body")), MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a750c2L, 0xa107f9943a750c3L, "statements"))).addElement(SNodeOperations.getNodeAncestor(selectedNode, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a750c1L, "MPSGobstones.structure.Statement"), true, false));
      }
      editorContext.selectWRTFocusPolicy(routineDeclaration);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ExtractProcedure_Intention.this;
    }
  }
}
