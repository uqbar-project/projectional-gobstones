package GsDesktopUI.view;

/*Generated by MPS */

import javax.swing.JComponent;
import JavaGobstones.models.Cell;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.BorderFactory;

public class CellView extends JComponent {

  private final Cell cell;
  public static Font font = new Font("Serif", Font.CENTER_BASELINE, 9);
  private final int PADDING = 6;
  private final int STONE_WIDTH = 22;
  private final int CENTER_POSITION = PADDING + STONE_WIDTH + PADDING;
  private final int CELL_SIDE = CENTER_POSITION + STONE_WIDTH + PADDING;

  @Override
  protected void paintComponent(Graphics graphics) {
    super.paintComponent(graphics);

    graphics.setFont(CellView.font);

    if (cell != null) {
      if (cell.getRed() > 0) {
        graphics.setColor(Color.red);
        graphics.fillOval(PADDING, PADDING, STONE_WIDTH, STONE_WIDTH);
      }
      if (cell.getBlack() > 0) {
        graphics.setColor(Color.black);
        graphics.fillOval(CENTER_POSITION, PADDING, STONE_WIDTH, STONE_WIDTH);
      }
      if (cell.getBlue() > 0) {
        graphics.setColor(Color.blue);
        graphics.fillOval(PADDING, CENTER_POSITION, STONE_WIDTH, STONE_WIDTH);
      }
      if (cell.getGreen() > 0) {
        graphics.setColor(Color.green);
        graphics.fillOval(CENTER_POSITION, CENTER_POSITION, STONE_WIDTH, STONE_WIDTH);
      }
      graphics.setColor(Color.white);
      graphics.drawString(cell.x + ":" + cell.y, STONE_WIDTH, CENTER_POSITION);
    }
  }
  @Override
  public Dimension getPreferredSize() {
    return new Dimension(CELL_SIDE, CELL_SIDE);
  }

  public CellView() {
    this(null);
  }

  public CellView(Cell cell1) {
    cell = cell1;
    this.setBorder(BorderFactory.createLineBorder(((cell != null && cell.isSelected()) ? Color.BLACK : Color.WHITE)));
  }
}
