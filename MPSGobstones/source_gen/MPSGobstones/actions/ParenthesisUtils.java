package MPSGobstones.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import MPSGobstones.behavior.BinaryLike__BehaviorDescriptor;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import MPSGobstones.behavior.BinaryOperation__BehaviorDescriptor;

public class ParenthesisUtils {


  private static SNode findWrappingParens(SNode original) {
    SNode current = original;
    while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression"))) {
      current = SNodeOperations.cast(SNodeOperations.getParent(current), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression"));
      if (SNodeOperations.isInstanceOf(current, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a40ba1L, "MPSGobstones.structure.ParenthesisExpression"))) {
        return current;
      }
    }
    return null;
  }



  /**
   * Returns an orderred list of nodes with incomplete left/right paren
   * The nodes are orderred by their occurence on the expression in left-to-right order
   * The current node is added at the front of the list,
   * so that it is always the most distant node among the returned candidates
   */
  private static List<SNode> descendInto(SNode expr, boolean completingByRightParen) {
    List<SNode> path = ListSequence.fromListAndArray(new ArrayList<SNode>(), null, expr);
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());

    SNode current = expr;
    while (ListSequence.fromList(path).isNotEmpty()) {
      if (SNodeOperations.isInstanceOf(current, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike"))) {
        if (eq_v66l8t_a0a0a0e0g(ListSequence.fromList(path).last(), current)) {
          SNode left = BinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id5f2KzShOO0_.invoke(SNodeOperations.cast(current, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike")));
          if (left != null) {
            ListSequence.fromList(path).addElement(left);
            current = left;
          } else {
            current = ListSequence.fromList(path).removeLastElement();
          }
        } else {
          ListSequence.fromList(result).addElement(current);
          SNode right = BinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id5f2KzShOPxX.invoke(SNodeOperations.cast(current, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike")));
          if (right != null) {
            ListSequence.fromList(path).addElement(right);
            current = right;
          } else {
            current = ListSequence.fromList(path).removeLastElement();
          }
        }
      } else {
        ListSequence.fromList(result).addElement(current);
        if (eq_v66l8t_a0b0a0a4a6(ListSequence.fromList(path).last(), current)) {
          ListSequence.fromList(path).removeLastElement();
        }
        current = ListSequence.fromList(path).removeLastElement();
      }
    }
    if (!(completingByRightParen)) {
      result = ListSequence.fromList(result).reversedList();
    }

    return result;
  }

  /**
   * Create a ParenthesisedExpression and hook it properly into the model
   * 
   * @param leftTurn The expression that should be put outside and to the left from the new parens
   * @param rightTurn The expression that should be put outside and to the right from the new parens
   * @param firstCommonAncestor The common ancestor expression of both parentheses
   */
  private static SNode rebalance(SNode leftTurn, SNode firstCommonAncestor, SNode rightTurn) {

    // Accumulate expressions between the leftTurn and firstCommon to include inside the parens. 
    // These would be the nodes into which we come from the left child. 
    SNode leftAccumulator = buildAccumulator(firstCommonAncestor, leftTurn, true);
    // Accumulate expressions between the rightTurn and firstCommon to include inside the parens. 
    // These would be the nodes into which we come from the right child. 
    SNode rightAccumulator = buildAccumulator(firstCommonAncestor, rightTurn, false);

    SNode parens = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a40ba1L, "MPSGobstones.structure.ParenthesisExpression")), null);
    if (SNodeOperations.isInstanceOf(firstCommonAncestor, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      rebalanceIBinaryLikeAfterParenthing(SNodeOperations.cast(firstCommonAncestor, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation")), rightTurn, leftTurn, parens, rightAccumulator, leftAccumulator);
    }

    SLinkOperations.setTarget(parens, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a40ba1L, 0x618424b489a40ba2L, "contained"), firstCommonAncestor);
    return parens;
  }

  private static void rebalanceIBinaryLikeAfterParenthing(SNode node, SNode rightTurn, SNode leftTurn, SNode parens, SNode rightAccumulator, SNode leftAccumulator) {
    SNode leftSide = BinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id5f2KzShOO0_.invoke(node);
    SNode rightSide = BinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id5f2KzShOPxX.invoke(node);
    assert leftSide != null || rightSide != null;
    SNode head = (rightSide != null ? rightSide : leftSide);
    SNodeOperations.replaceWithAnother(node, head);
    SLinkOperations.setTarget(parens, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a40ba1L, 0x618424b489a40ba2L, "contained"), node);

    if (leftAccumulator != null) {
      BinaryLike__BehaviorDescriptor.setSyntacticallyLeftSideExpression_id5f2KzShOTHT.invoke(node, leftAccumulator);
    }
    if (rightAccumulator != null) {
      BinaryLike__BehaviorDescriptor.setSyntacticallyRightSideExpression_id1wHCnsn58ZY.invoke(node, rightAccumulator);
    }
    SNode subtree;
    if (leftSide != null) {
      subtree = leftSide;
      BinaryLike__BehaviorDescriptor.setSyntacticallyRightSideExpression_id1wHCnsn58ZY.invoke(leftTurn, parens);
    } else {
      subtree = parens;
    }
    if (rightSide != null) {
      BinaryLike__BehaviorDescriptor.setSyntacticallyLeftSideExpression_id5f2KzShOTHT.invoke(rightTurn, subtree);
    }
  }



  /**
   * Accumulate the nodes that need to be added into the parentheses
   */
  private static SNode buildAccumulator(SNode firstCommonAncestor, SNode turn, boolean left) {
    SNode accumulator;
    if (turn != null && neq_v66l8t_a0a1a41(turn, firstCommonAncestor)) {
      // Accumulate nodes on the path up from the left/right paren 
      accumulator = (left ? BinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id5f2KzShOPxX.invoke(turn) : BinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id5f2KzShOO0_.invoke(turn));
      SNodeOperations.detachNode(accumulator);
      SNode current = SNodeOperations.cast(SNodeOperations.getParent(turn), MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike"));
      SNode previous = turn;
      while (neq_v66l8t_a0f0b0o(current, firstCommonAncestor)) {
        SNode sideExpression = (left ? BinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id5f2KzShOO0_.invoke(current) : BinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id5f2KzShOPxX.invoke(current));
        if (sideExpression != null && eq_v66l8t_a0a1a5a1a41(sideExpression, previous)) {
          SNodeOperations.replaceWithAnother(current, previous);
          if (left) {
            BinaryLike__BehaviorDescriptor.setSyntacticallyLeftSideExpression_id5f2KzShOTHT.invoke(current, accumulator);
          } else {
            BinaryLike__BehaviorDescriptor.setSyntacticallyRightSideExpression_id1wHCnsn58ZY.invoke(current, accumulator);
          }
          accumulator = SNodeOperations.cast(current, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression"));
        } else {
          previous = current;
        }
        current = SNodeOperations.cast(SNodeOperations.getParent(previous), MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike"));
      }
    } else {
      // Nothing to accumulate 
      SNode firstCommonAncestorChild = (left ? BinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id5f2KzShOO0_.invoke(firstCommonAncestor) : BinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id5f2KzShOPxX.invoke(firstCommonAncestor));
      if (firstCommonAncestorChild != null) {
        accumulator = firstCommonAncestorChild;
        SNodeOperations.detachNode(accumulator);
      } else {
        accumulator = null;
      }
    }
    return accumulator;
  }


  /**
   * Climb up the ancestor expressions and return the first binary operation, in which we come from the right sub-tree.
   * 
   * @param stopNode Never climb beyond this node
   */
  private static SNode findLeftTurn(SNode leaf, SNode stopNode) {
    return findTurn(leaf, stopNode, true);
  }

  /**
   * Climb up the ancestor expressions and return the first binary operation, in which we come from the left sub-tree.
   * 
   * @param stopNode Never climb beyond this node
   */
  private static SNode findRightTurn(SNode leaf, SNode stopNode) {
    return findTurn(leaf, stopNode, false);
  }

  private static SNode findTurn(SNode leaf, SNode stopNode, boolean leftTurn) {
    SNode currentNode = SNodeOperations.getParent(leaf);
    SNode previous = leaf;
    while (neq_v66l8t_a0a2a12(previous, stopNode) && SNodeOperations.isInstanceOf(currentNode, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike"))) {
      SNode leftSideExpression = BinaryLike__BehaviorDescriptor.getSyntacticallyLeftSideExpression_id5f2KzShOO0_.invoke(SNodeOperations.cast(currentNode, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike")));
      SNode rightSideExpression = BinaryLike__BehaviorDescriptor.getSyntacticallyRightSideExpression_id5f2KzShOPxX.invoke(SNodeOperations.cast(currentNode, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike")));
      if (leftTurn && eq_v66l8t_a0a2a2a12(rightSideExpression, previous)) {
        return SNodeOperations.cast(currentNode, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike"));
      }
      if (!(leftTurn) && eq_v66l8t_a0a3a2a12(leftSideExpression, previous)) {
        return SNodeOperations.cast(currentNode, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike"));
      }

      previous = currentNode;
      currentNode = SNodeOperations.getParent(currentNode);
    }
    return null;
  }


  /**
   * Find all the ancestor expressions of leaf that could be wrapped in parens.
   * Stops when the parent current expression could no longer be parenthesised.
   */
  private static List<SNode> parentPath(SNode leaf, boolean rightParen) {
    List<SNode> path = new ArrayList<SNode>();
    ListSequence.fromList(path).addElement(leaf);

    for (SNode currentNode = SNodeOperations.getParent(leaf); SNodeOperations.isInstanceOf(currentNode, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike")) && (boolean) BinaryLike__BehaviorDescriptor.canPropagateUnmatchedParenUp_id1wHCnsn58ZA.invoke(SNodeOperations.cast(currentNode, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d33879L, "MPSGobstones.structure.BinaryLike")), leaf, ((boolean) rightParen)); currentNode = SNodeOperations.getParent(currentNode)) {
      ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression")));
    }
    return path;
  }

  public static void checkWholeExpressionPriorities(SNode expr) {
    SNode current = expr;
    // find the top-most expression 
    while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression"))) {
      current = SNodeOperations.cast(SNodeOperations.getParent(current), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression"));
    }

    List<SNode> candidates = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(candidates).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(current, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"), true, new SAbstractConcept[]{})));
    checkCandidateExpressionsPriorities(candidates);
  }

  public static void checkOperationWRTPriority(SNode binOp) {
    List<SNode> candidates = ListSequence.fromListAndArray(new ArrayList<SNode>(), binOp);
    checkCandidateExpressionsPriorities(candidates);
  }

  private static void checkCandidateExpressionsPriorities(List<SNode> candidates) {
    while (ListSequence.fromList(candidates).isNotEmpty()) {
      SNode candidate = ListSequence.fromList(candidates).first();
      if (checkOperationChildWRTPriority(candidate, false, candidates) && checkOperationChildWRTPriority(candidate, true, candidates) && checkOperationParentWRTPriority(candidate, candidates)) {
        ListSequence.fromList(candidates).removeElementAt(0);
      }
    }
  }

  private static boolean checkOperationChildWRTPriority(SNode node, boolean isRight, List<SNode> candidates) {
    SNode sideExpr = (isRight ? SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right")) : SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left")));
    if (SNodeOperations.isInstanceOf(sideExpr, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"))) {
      SNode sideChild = SNodeOperations.cast(sideExpr, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"));
      if (isBadPriority(sideChild, node, isRight)) {
        ParenthesisUtils.rotateTree(sideChild, node, isRight);
        ListSequence.fromList(candidates).addElement(SNodeOperations.cast(sideExpr, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation")));
        return false;
      }
    }
    return true;
  }

  private static boolean checkOperationParentWRTPriority(SNode node, List<SNode> candidates) {
    if (SNodeOperations.getParent(node) == null) {
      return true;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"))) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"));
      boolean isRight = false;
      if (SLinkOperations.getTarget(parent, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right")) == node) {
        isRight = true;
      } else if (SLinkOperations.getTarget(parent, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left")) == node) {
        isRight = false;
      }
      if (ParenthesisUtils.isBadPriority(node, parent, isRight)) {
        ParenthesisUtils.rotateTree(node, parent, isRight);
        ListSequence.fromList(candidates).addElement(parent);
        return false;
      }
      return true;
    } else {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a4c1f269L, "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"))) {
      } else if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a3cd9fL, "MPSGobstones.structure.UnaryNot"))) {
        SNode notExpr = SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a3cd9fL, "MPSGobstones.structure.UnaryNot"));
        SNodeOperations.replaceWithAnother(notExpr, node);
        SLinkOperations.setTarget(notExpr, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a3cd9fL, 0x618424b489a3cda0L, "expression"), SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left")));
        SLinkOperations.setTarget(node, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left"), notExpr);
      } else {
        return true;
      }
      return false;
    }
  }

  public static SNode getBinOp(SNode expr, boolean toRight) {
    SNode parent = SNodeOperations.getParent(expr);
    if (!(SNodeOperations.isInstanceOf(parent, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation")))) {
      return null;
    }
    SNode parentOp = SNodeOperations.cast(parent, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"));
    boolean right = toRight && SLinkOperations.getTarget(parentOp, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left")) == expr;
    boolean left = !(toRight) && SLinkOperations.getTarget(parentOp, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right")) == expr;
    if (right || left) {
      return parentOp;
    }
    return getBinOp(parentOp, toRight);
  }
  public static void rotateTree(SNode child, SNode op, boolean isRight) {
    SNode backsideExpr = (isRight ? SLinkOperations.getTarget(child, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left")) : SLinkOperations.getTarget(child, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right")));
    SNodeOperations.detachNode(child);
    SNodeOperations.replaceWithAnother(op, child);
    SNodeOperations.replaceWithAnother(backsideExpr, op);
    if (isRight) {
      SLinkOperations.setTarget(op, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right"), backsideExpr);
    } else {
      SLinkOperations.setTarget(op, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left"), backsideExpr);
    }
  }
  public static boolean isBadPriority(SNode child, SNode parent, boolean isRight) {
    return (int) BinaryOperation__BehaviorDescriptor.getPriority_id1653mnvAgo2.invoke(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(child))) < (int) BinaryOperation__BehaviorDescriptor.getPriority_id1653mnvAgo2.invoke(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(parent))) || (isRight && ((int) (int) BinaryOperation__BehaviorDescriptor.getPriority_id1653mnvAgo2.invoke(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(child)))) == ((int) (int) BinaryOperation__BehaviorDescriptor.getPriority_id1653mnvAgo2.invoke(SNodeOperations.asSConcept(SNodeOperations.getConceptDeclaration(parent)))));
  }

  private static boolean eq_v66l8t_a0a0a0e0g(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_v66l8t_a0b0a0a4a6(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean neq_v66l8t_a0a1a41(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
  private static boolean eq_v66l8t_a0a1a5a1a41(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean neq_v66l8t_a0f0b0o(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
  private static boolean neq_v66l8t_a0a2a12(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
  private static boolean eq_v66l8t_a0a2a2a12(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_v66l8t_a0a3a2a12(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
