package MPSGobstones.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import MPSGobstones.behavior.BinaryOperation__BehaviorDescriptor;

public class PrecedenceUtils {
  public static SNode getTargetForRightTransform(SNode contextNode) {
    SNode targetNode = contextNode;
    for (SNode parentNode = SNodeOperations.getParent(targetNode); parentNode != null && SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression")); parentNode = SNodeOperations.getParent(targetNode)) {
      if (SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4fa27ddL, "MPSGobstones.structure.RoutineInvocation")) || SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a40ba1L, "MPSGobstones.structure.ParenthesisExpression"))) {
        // if parent expression is IMethodCall then targetNode is either actualArgument 
        // or typeArgument (parameters of method call), so we should not go upper 
        // same with ParenthesizedExpression 
        break;
      }
      SNode targetContainingLink = SNodeOperations.getContainingLinkDeclaration(targetNode);
      if (SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation")) && targetContainingLink == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left"))) {
        // if parent expression is BinaryOperation and target is left child of it 
        // then we should rather transform current target 
        break;
      }
      targetNode = SNodeOperations.cast(parentNode, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression"));
    }
    return targetNode;
  }

  public static SNode getTargetForLeftTransform(SNode contextNode, SNode resultNode) {
    int resultingExpressionPriority = PrecedenceUtils.getPriority(SNodeOperations.getConceptDeclaration(resultNode)).ordinal();
    SNode targetNode = contextNode;
    for (SNode parentNode = SNodeOperations.getParent(targetNode); parentNode != null && SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression")) && PrecedenceUtils.getPriority(SNodeOperations.castConcept(SNodeOperations.getConceptDeclaration(parentNode), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression"))).ordinal() < resultingExpressionPriority; parentNode = SNodeOperations.getParent(targetNode)) {
      if (SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation")) && SNodeOperations.getContainingLinkDeclaration(targetNode) == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right"))) {
        // if parent expression is BinaryOperation having higher priority and target is rhigh child of it 
        // then we should rather transform current target and add additional parenthesis around resulting expression 
        break;
      }
      targetNode = SNodeOperations.cast(parentNode, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a5958eL, "MPSGobstones.structure.Expression"));
    }
    return targetNode;
  }

  public static boolean isSamePriority(SNode firstExpression, SNode secondExpression) {
    return getPriority(SNodeOperations.getConceptDeclaration(firstExpression)) == getPriority(SNodeOperations.getConceptDeclaration(secondExpression));
  }
  public static SNode parenthesiseIfNecessary(@NotNull SNode contextNode) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(contextNode), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"))) {
      SNode parentBinaryOperation = SNodeOperations.cast(SNodeOperations.getParent(contextNode), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"));
      if (SNodeOperations.getContainingLinkDeclaration(contextNode) == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right")) && isHigherPriority(parentBinaryOperation, contextNode)) {
        SNode result = SNodeFactoryOperations.replaceWithNewChild(contextNode, SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a40ba1L, "MPSGobstones.structure.ParenthesisExpression")));
        SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a40ba1L, 0x618424b489a40ba2L, "contained"), contextNode);
        return result;
      }
    }
    return contextNode;
  }


  public static boolean needsParensAroundNotExpression(SNode notExpression) {
    return !(((SLinkOperations.getTarget(notExpression, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a3cd9fL, 0x618424b489a3cda0L, "expression")) == null) || (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(notExpression, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a3cd9fL, 0x618424b489a3cda0L, "expression")), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation")))) || PrecedenceUtils.isHigherPriority(SLinkOperations.getTarget(notExpression, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a3cd9fL, 0x618424b489a3cda0L, "expression")), notExpression)));


  }


  private static boolean isHigherPriority(SNode firstExpression, SNode secondExpression) {
    return getPriority(SNodeOperations.getConceptDeclaration(firstExpression)).ordinal() < getPriority(SNodeOperations.getConceptDeclaration(secondExpression)).ordinal();
  }
  private static PrecedenceUtils.Precedence getPriority(SNode expression) {
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(expression), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"))) {
      switch ((int) BinaryOperation__BehaviorDescriptor.getPriority_id1653mnvAgo2.invoke(SNodeOperations.asSConcept(SNodeOperations.castConcept(expression, MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"))))) {
        case 2:
          // || 
          return PrecedenceUtils.Precedence.J_13;
        case 3:
          // && 
          return PrecedenceUtils.Precedence.J_12;
        case 4:
          // | 
          return PrecedenceUtils.Precedence.J_11;
        case 5:
          // ^ 
          return PrecedenceUtils.Precedence.J_10;
        case 6:
          // & 
          return PrecedenceUtils.Precedence.J_9;
        case 7:
          // ==, != 
          return PrecedenceUtils.Precedence.J_8;
        case 8:
          // <, <=, >, >= 
          return PrecedenceUtils.Precedence.J_7;
        case 9:
          // >>, << 
          return PrecedenceUtils.Precedence.J_6;
        case 10:
          // +, - 
          return PrecedenceUtils.Precedence.J_5;
        case 11:
          // *, /, % 
          return PrecedenceUtils.Precedence.J_4;
        default:
      }
    }

    // TODO: not sure concerning ParenthesizedExpression priorities.. 
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(expression), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a40ba1L, "MPSGobstones.structure.ParenthesisExpression"))) {
      return PrecedenceUtils.Precedence.PARENTHESES;
    }
    // TODO: m.b. we should make "Default" precenence higher then all the user extensions 
    // TODO: will be recognized as high-priority expressions 
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(expression), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x53c2c23e11d53505L, "MPSGobstones.structure.VariableReference"))) {
      return PrecedenceUtils.Precedence.ARRAY_OPARATIONS_AND_METHOD_CALLS;
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(expression), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x618424b489a3cd9fL, "MPSGobstones.structure.UnaryNot"))) {
      return PrecedenceUtils.Precedence.J_2;
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(expression), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x299df48a5a06b9ceL, "MPSGobstones.structure.VariableAssignment"))) {
      return PrecedenceUtils.Precedence.J_15;
    }
    return PrecedenceUtils.Precedence.DEFAULT;
  }
  public static SNode processLeftTransform(SNode sourceNode, SNode result) {
    SNode nodeToProcess = PrecedenceUtils.getTargetForLeftTransform(sourceNode, result);
    // since BinaryOperations are left-associative we should perform complex LT then 
    // BinaryOperations is "rightExpression" child of another BinaryOperations with same priority 
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(nodeToProcess), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation")) && SNodeOperations.getContainingLinkDeclaration(nodeToProcess) == SLinkOperations.findLinkDeclaration(MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right"))) {
      SNode parentBinaryOperation = SNodeOperations.cast(SNodeOperations.getParent(nodeToProcess), MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation"));
      if (PrecedenceUtils.isSamePriority(parentBinaryOperation, result)) {
        SNodeOperations.replaceWithAnother(parentBinaryOperation, result);
        SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right"), nodeToProcess);
        SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left"), parentBinaryOperation);
        return result;
      }
    }
    SNodeOperations.replaceWithAnother(nodeToProcess, result);
    SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right"), nodeToProcess);
    PrecedenceUtils.parenthesiseIfNecessary(result);

    return result;
  }
  public static SNode processRightTransform(SNode sourceNode, SNode result) {
    SNodeOperations.replaceWithAnother(sourceNode, result);
    SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left"), sourceNode);
    ParenthesisUtils.checkOperationWRTPriority(result);
    return result;
  }
  private static   enum Precedence {
    PARENTHESES(),
    ARRAY_OPARATIONS_AND_METHOD_CALLS(),
    DOT_EXPRESSION(),
    POSTFIX_EXPRESSIONS(),
    J_2(),
    J_3(),
    J_4(),
    J_5(),
    J_6(),
    J_7(),
    J_8(),
    J_9(),
    J_10(),
    J_11(),
    J_12(),
    J_13(),
    J_14(),
    J_15(),
    DEFAULT();

    Precedence() {
      // All J_ constants corresponds to the levels "defined" in java - see 
      // http://www.cs.princeton.edu/introcs/11precedence/ 

      // All MPS_ constants were introduced in MPS languages 

      // Actual priority of Expression is determined by ordinal of corresponding 
      // enumeration constant upper constants has higher priority then lower 
    }
  }

}
