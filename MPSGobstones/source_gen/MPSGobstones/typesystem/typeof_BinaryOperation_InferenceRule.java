package MPSGobstones.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.IRuleConflictWarningProducer;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class typeof_BinaryOperation_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_BinaryOperation_InferenceRule() {
  }
  public void applyRule(final SNode operation, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    typeCheckingContext.addDependencyForCurrent(SLinkOperations.getTarget(operation, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left")));
    typeCheckingContext.addDependencyForCurrent(SLinkOperations.getTarget(operation, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right")));
    {
      final SNode leftType = typeCheckingContext.typeOf(SLinkOperations.getTarget(operation, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a8201eL, "left")), "r:a3d7b434-0554-4138-a6f0-66b6a9099d5b(MPSGobstones.typesystem)", "1387988544209571129", true);
      typeCheckingContext.whenConcrete(leftType, new Runnable() {
        public void run() {
          {
            final SNode rightType = typeCheckingContext.typeOf(SLinkOperations.getTarget(operation, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, 0xa107f9943a82021L, "right")), "r:a3d7b434-0554-4138-a6f0-66b6a9099d5b(MPSGobstones.typesystem)", "1387988544209571123", true);
            typeCheckingContext.whenConcrete(rightType, new Runnable() {
              public void run() {
                SNode opType = typeCheckingContext.getOverloadedOperationType(operation, typeCheckingContext.getExpandedNode(leftType), typeCheckingContext.getExpandedNode(rightType), new IRuleConflictWarningProducer() {
                  public void produceWarning(String modelId, String ruleId) {
                    typeCheckingContext.reportWarning(operation, "coflicting rules for overloaded operation type", modelId, ruleId, null, new NodeMessageTarget());

                  }
                });
                if ((opType != null)) {
                  {
                    SNode _nodeToCheck_1029348928467 = operation;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:a3d7b434-0554-4138-a6f0-66b6a9099d5b(MPSGobstones.typesystem)", "1387988544209571109", 0, null);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:a3d7b434-0554-4138-a6f0-66b6a9099d5b(MPSGobstones.typesystem)", "1387988544209571113", true), (SNode) opType, _info_12389875345);
                  }
                } else {
                  {
                    MessageTarget errorTarget = new NodeMessageTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(operation, "El operador '" + SConceptOperations.conceptAlias(SNodeOperations.getConcept(operation)) + "' no puede ser aplicado a '" + typeCheckingContext.getExpandedNode(leftType) + "', '" + typeCheckingContext.getExpandedNode(rightType) + "'", "r:a3d7b434-0554-4138-a6f0-66b6a9099d5b(MPSGobstones.typesystem)", "1387988544209571120", null, errorTarget);
                  }
                }
              }
            }, "r:a3d7b434-0554-4138-a6f0-66b6a9099d5b(MPSGobstones.typesystem)", "1387988544209571098", false, false);
          }
        }
      }, "r:a3d7b434-0554-4138-a6f0-66b6a9099d5b(MPSGobstones.typesystem)", "1387988544209571096", false, false);
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0xa107f9943a8201dL, "MPSGobstones.structure.BinaryOperation");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
