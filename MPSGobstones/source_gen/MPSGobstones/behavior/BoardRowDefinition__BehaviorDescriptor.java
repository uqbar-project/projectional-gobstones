package MPSGobstones.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.SortedSet;
import JavaGobstones.models.Cell;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.SortedSetSequence;
import java.util.TreeSet;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class BoardRowDefinition__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac52c7b77L, "MPSGobstones.structure.BoardRowDefinition");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> addCells_id7WjOWF5cAx7 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addCells").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7WjOWF5cAx7").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<Void> removeLast_id7WjOWF5cCPQ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("removeLast").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7WjOWF5cCPQ").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<SortedSet<Cell>> generateRow_id7WjOWF5dImH = new SMethodBuilder<SortedSet<Cell>>(new SJavaCompoundTypeImpl((Class<SortedSet<Cell>>) ((Class) Object.class))).name("generateRow").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7WjOWF5dImH").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Integer.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(addCells_id7WjOWF5cAx7, removeLast_id7WjOWF5cCPQ, generateRow_id7WjOWF5dImH);

  private static void ___init___(@NotNull SNode __thisNode__) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac52c7b77L, 0x7f13d3cac52c7b83L, "cells"))).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac5200080L, "MPSGobstones.structure.CellDefinition"))));
  }

  /*package*/ static void addCells_id7WjOWF5cAx7(@NotNull SNode __thisNode__, int amount) {
    for (int i = 0; i < amount; i++) {
      ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac52c7b77L, 0x7f13d3cac52c7b83L, "cells"))).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac5200080L, "MPSGobstones.structure.CellDefinition"))));
    }
  }
  /*package*/ static void removeLast_id7WjOWF5cCPQ(@NotNull SNode __thisNode__, int amount) {
    for (int i = 0; i < amount; i++) {
      ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac52c7b77L, 0x7f13d3cac52c7b83L, "cells"))).removeLastElement();
    }
  }
  /*package*/ static SortedSet<Cell> generateRow_id7WjOWF5dImH(@NotNull SNode __thisNode__, int y) {
    int x = 0;
    SortedSet<Cell> row = SortedSetSequence.fromSet(new TreeSet<Cell>());
    for (SNode cell : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac52c7b77L, 0x7f13d3cac52c7b83L, "cells")))) {
      SortedSetSequence.fromSet(row).addElement(CellDefinition__BehaviorDescriptor.generateCell_id7WjOWF5dFPA.invoke(cell, ((int) x), ((int) y)));
      x++;
    }
    return row;
  }

  /*package*/ BoardRowDefinition__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        addCells_id7WjOWF5cAx7(node, ((int) (Integer) parameters[0]));
        return null;
      case 1:
        removeLast_id7WjOWF5cCPQ(node, ((int) (Integer) parameters[0]));
        return null;
      case 2:
        return (T) ((SortedSet<Cell>) generateRow_id7WjOWF5dImH(node, ((int) (Integer) parameters[0])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
