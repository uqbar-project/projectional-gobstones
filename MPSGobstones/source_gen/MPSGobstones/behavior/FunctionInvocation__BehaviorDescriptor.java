package MPSGobstones.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class FunctionInvocation__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4f69cb6L, "MPSGobstones.structure.FunctionInvocation");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<InterpreterValue> reduce_id2AtX8Dq04bG = new SMethodBuilder<InterpreterValue>(new SJavaCompoundTypeImpl(InterpreterValue.class)).name("reduce").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2AtX8Dq04bG").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(InterpreterState.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(reduce_id2AtX8Dq04bG);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static InterpreterValue reduce_id2AtX8Dq04bG(@NotNull SNode __thisNode__, InterpreterState state) {
    Map<String, InterpreterValue> parameterVariables = RoutineInvocation__BehaviorDescriptor.initializeParameterVariables_id7WjOWF4Zr9t.invoke(__thisNode__, state);
    state.startIsolatedContext();
    MapSequence.fromMap(state.context).putAll(parameterVariables);
    for (SNode statement : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4fa27ddL, 0x7f13d3cac4fdc2a0L, "declaration")), MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4f69cb5L, 0x7f13d3cac4f6efb2L, "statements")))) {
      Statement__BehaviorDescriptor.interpret_idW6XMzE_hbz.invoke(statement, state);
    }
    InterpreterValue result = Expression__BehaviorDescriptor.reduce_id2AtX8Dq04bG.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4fa27ddL, 0x7f13d3cac4fdc2a0L, "declaration")), MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4f69cb5L, 0x7f13d3cac4f6efadL, "return")), state);
    state.endIsolatedContext();
    return result;
  }

  /*package*/ FunctionInvocation__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((InterpreterValue) reduce_id2AtX8Dq04bG(node, (InterpreterState) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
