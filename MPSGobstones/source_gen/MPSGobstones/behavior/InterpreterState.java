package MPSGobstones.behavior;

/*Generated by MPS */

import JavaGobstones.models.Board;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.DequeSequence;
import java.util.LinkedList;

public class InterpreterState {
  public Board board;
  public Map<String, InterpreterValue> context = MapSequence.fromMap(new HashMap<String, InterpreterValue>());
  private Deque<Map<String, InterpreterValue>> contextStack = DequeSequence.fromDequeNew(new LinkedList<Map<String, InterpreterValue>>());
  private Deque<Board> boardStack = DequeSequence.fromDequeNew(new LinkedList<Board>());

  public InterpreterState(Board board) {
    this.board = board;
  }
  public void startContext() {
    DequeSequence.fromDequeNew(contextStack).pushElement(context);
    context = MapSequence.fromMap(new HashMap<String, InterpreterValue>());
  }
  public void endContext() {
    context = DequeSequence.fromDequeNew(contextStack).popElement();
  }
  public void setVariable(String name, InterpreterValue value) {
    MapSequence.fromMap(context).put(name, value);
  }
  public InterpreterValue getValueOf(String name) {
    return MapSequence.fromMap(context).get(name);
  }
  public void startIsolatedContext() {
    startContext();
    DequeSequence.fromDequeNew(boardStack).pushElement(board);
    board = board.clone();
  }
  public void endIsolatedContext() {
    board = DequeSequence.fromDequeNew(boardStack).popElement();
    endContext();
  }
}
