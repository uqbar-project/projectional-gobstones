package MPSGobstones.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.Map;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class RoutineInvocation__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4fa27ddL, "MPSGobstones.structure.RoutineInvocation");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Map<String, InterpreterValue>> initializeParameterVariables_id7WjOWF4Zr9t = new SMethodBuilder<Map<String, InterpreterValue>>(new SJavaCompoundTypeImpl((Class<Map<String, InterpreterValue>>) ((Class) Object.class))).name("initializeParameterVariables").modifiers(SModifiersImpl.create(0, AccessPrivileges.PROTECTED)).concept(CONCEPT).id("7WjOWF4Zr9t").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(InterpreterState.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(initializeParameterVariables_id7WjOWF4Zr9t);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Map<String, InterpreterValue> initializeParameterVariables_id7WjOWF4Zr9t(@NotNull final SNode __thisNode__, final InterpreterState state) {
    final Wrappers._int argumentIndex = new Wrappers._int(0);
    final Map<String, InterpreterValue> parameterVariables = MapSequence.fromMap(new HashMap<String, InterpreterValue>());
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4fa27ddL, 0x5584496b797dda55L, "parameters"))).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        MapSequence.fromMap(parameterVariables).put(SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4fa27ddL, 0x7f13d3cac4fdc2a0L, "declaration")), MetaAdapterFactory.getContainmentLink(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x7f13d3cac4fa21bbL, 0x7f13d3cac4fa21bcL, "arguments"))).getElement(argumentIndex.value), MetaAdapterFactory.getProperty(0xcb8c78e791643a8L, 0x8d8ea292ead7a894L, 0x32ccd531a47ba7f6L, 0x32ccd531a47ba7f9L, "name")), Expression__BehaviorDescriptor.reduce_id2AtX8Dq04bG.invoke(it, state));
        argumentIndex.value++;
      }
    });
    return parameterVariables;
  }

  /*package*/ RoutineInvocation__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Map<String, InterpreterValue>) initializeParameterVariables_id7WjOWF4Zr9t(node, (InterpreterState) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
