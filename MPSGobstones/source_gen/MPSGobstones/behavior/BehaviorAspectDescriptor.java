package MPSGobstones.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myProgram__BehaviorDescriptor = new Program__BehaviorDescriptor();
  private final BHDescriptor myExpression__BehaviorDescriptor = new Expression__BehaviorDescriptor();
  private final BHDescriptor myStatement__BehaviorDescriptor = new Statement__BehaviorDescriptor();
  private final BHDescriptor myStatementList__BehaviorDescriptor = new StatementList__BehaviorDescriptor();
  private final BHDescriptor myFalse__BehaviorDescriptor = new False__BehaviorDescriptor();
  private final BHDescriptor myTrue__BehaviorDescriptor = new True__BehaviorDescriptor();
  private final BHDescriptor myBinaryOperation__BehaviorDescriptor = new BinaryOperation__BehaviorDescriptor();
  private final BHDescriptor myAndExpression__BehaviorDescriptor = new AndExpression__BehaviorDescriptor();
  private final BHDescriptor myEqualsTo__BehaviorDescriptor = new EqualsTo__BehaviorDescriptor();
  private final BHDescriptor myGreaterThan__BehaviorDescriptor = new GreaterThan__BehaviorDescriptor();
  private final BHDescriptor myLessThan__BehaviorDescriptor = new LessThan__BehaviorDescriptor();
  private final BHDescriptor myGreaterEqualsThan__BehaviorDescriptor = new GreaterEqualsThan__BehaviorDescriptor();
  private final BHDescriptor myLessEqualThan__BehaviorDescriptor = new LessEqualThan__BehaviorDescriptor();
  private final BHDescriptor myComparision__BehaviorDescriptor = new Comparision__BehaviorDescriptor();
  private final BHDescriptor myVariableAssignment__BehaviorDescriptor = new VariableAssignment__BehaviorDescriptor();
  private final BHDescriptor myColor__BehaviorDescriptor = new Color__BehaviorDescriptor();
  private final BHDescriptor myRed__BehaviorDescriptor = new Red__BehaviorDescriptor();
  private final BHDescriptor myBlue__BehaviorDescriptor = new Blue__BehaviorDescriptor();
  private final BHDescriptor myGreen__BehaviorDescriptor = new Green__BehaviorDescriptor();
  private final BHDescriptor myBlack__BehaviorDescriptor = new Black__BehaviorDescriptor();
  private final BHDescriptor myDirection__BehaviorDescriptor = new Direction__BehaviorDescriptor();
  private final BHDescriptor myNorth__BehaviorDescriptor = new North__BehaviorDescriptor();
  private final BHDescriptor mySouth__BehaviorDescriptor = new South__BehaviorDescriptor();
  private final BHDescriptor myEast__BehaviorDescriptor = new East__BehaviorDescriptor();
  private final BHDescriptor myWest__BehaviorDescriptor = new West__BehaviorDescriptor();
  private final BHDescriptor myModOperation__BehaviorDescriptor = new ModOperation__BehaviorDescriptor();
  private final BHDescriptor myVariableName__BehaviorDescriptor = new VariableName__BehaviorDescriptor();
  private final BHDescriptor myProcedureInvocation__BehaviorDescriptor = new ProcedureInvocation__BehaviorDescriptor();
  private final BHDescriptor myRepeatStatement__BehaviorDescriptor = new RepeatStatement__BehaviorDescriptor();
  private final BHDescriptor myWhileStatement__BehaviorDescriptor = new WhileStatement__BehaviorDescriptor();
  private final BHDescriptor myRemoveColor__BehaviorDescriptor = new RemoveColor__BehaviorDescriptor();
  private final BHDescriptor myPlusOperation__BehaviorDescriptor = new PlusOperation__BehaviorDescriptor();
  private final BHDescriptor myDivOperation__BehaviorDescriptor = new DivOperation__BehaviorDescriptor();
  private final BHDescriptor myMulOperation__BehaviorDescriptor = new MulOperation__BehaviorDescriptor();
  private final BHDescriptor myIntegerOperation__BehaviorDescriptor = new IntegerOperation__BehaviorDescriptor();
  private final BHDescriptor myBinaryLike__BehaviorDescriptor = new BinaryLike__BehaviorDescriptor();
  private final BHDescriptor myVariableReference__BehaviorDescriptor = new VariableReference__BehaviorDescriptor();
  private final BHDescriptor myPutColor__BehaviorDescriptor = new PutColor__BehaviorDescriptor();
  private final BHDescriptor myMoveClaw__BehaviorDescriptor = new MoveClaw__BehaviorDescriptor();
  private final BHDescriptor myBooleanType__BehaviorDescriptor = new BooleanType__BehaviorDescriptor();
  private final BHDescriptor myType__BehaviorDescriptor = new Type__BehaviorDescriptor();
  private final BHDescriptor myLogicalOperation__BehaviorDescriptor = new LogicalOperation__BehaviorDescriptor();
  private final BHDescriptor myOrExpression__BehaviorDescriptor = new OrExpression__BehaviorDescriptor();
  private final BHDescriptor myUnaryNot__BehaviorDescriptor = new UnaryNot__BehaviorDescriptor();
  private final BHDescriptor myParenthesisExpression__BehaviorDescriptor = new ParenthesisExpression__BehaviorDescriptor();
  private final BHDescriptor myIntegerLiteral__BehaviorDescriptor = new IntegerLiteral__BehaviorDescriptor();
  private final BHDescriptor myIfElseStatement__BehaviorDescriptor = new IfElseStatement__BehaviorDescriptor();
  private final BHDescriptor myFunctionInvocation__BehaviorDescriptor = new FunctionInvocation__BehaviorDescriptor();
  private final BHDescriptor myRoutineInvocation__BehaviorDescriptor = new RoutineInvocation__BehaviorDescriptor();
  private final BHDescriptor myNotEqualsTo__BehaviorDescriptor = new NotEqualsTo__BehaviorDescriptor();
  private final BHDescriptor myPowOperation__BehaviorDescriptor = new PowOperation__BehaviorDescriptor();
  private final BHDescriptor myDiffOperation__BehaviorDescriptor = new DiffOperation__BehaviorDescriptor();
  private final BHDescriptor myCanMoveClaw__BehaviorDescriptor = new CanMoveClaw__BehaviorDescriptor();
  private final BHDescriptor myHasColor__BehaviorDescriptor = new HasColor__BehaviorDescriptor();
  private final BHDescriptor myStonesQuantity__BehaviorDescriptor = new StonesQuantity__BehaviorDescriptor();
  private final BHDescriptor myBoardDefinition__BehaviorDescriptor = new BoardDefinition__BehaviorDescriptor();
  private final BHDescriptor myCellDefinition__BehaviorDescriptor = new CellDefinition__BehaviorDescriptor();
  private final BHDescriptor myBoardRowDefinition__BehaviorDescriptor = new BoardRowDefinition__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[58];
    myConceptBehaviorIds[0] = 0xa107f9943a58e1dL;
    myConceptBehaviorIds[1] = 0xa107f9943a5958eL;
    myConceptBehaviorIds[2] = 0xa107f9943a750c1L;
    myConceptBehaviorIds[3] = 0xa107f9943a750c2L;
    myConceptBehaviorIds[4] = 0xa107f9943a81181L;
    myConceptBehaviorIds[5] = 0xa107f9943a81182L;
    myConceptBehaviorIds[6] = 0xa107f9943a8201dL;
    myConceptBehaviorIds[7] = 0xa107f9943a8d6e5L;
    myConceptBehaviorIds[8] = 0x299df48a5a00142eL;
    myConceptBehaviorIds[9] = 0x299df48a5a00142fL;
    myConceptBehaviorIds[10] = 0x299df48a5a001430L;
    myConceptBehaviorIds[11] = 0x299df48a5a001431L;
    myConceptBehaviorIds[12] = 0x299df48a5a001432L;
    myConceptBehaviorIds[13] = 0x299df48a5a001434L;
    myConceptBehaviorIds[14] = 0x299df48a5a06b9ceL;
    myConceptBehaviorIds[15] = 0x2ab0def7b5610a42L;
    myConceptBehaviorIds[16] = 0x2ab0def7b5610a45L;
    myConceptBehaviorIds[17] = 0x2ab0def7b5610a46L;
    myConceptBehaviorIds[18] = 0x2ab0def7b5610a47L;
    myConceptBehaviorIds[19] = 0x2ab0def7b5610a48L;
    myConceptBehaviorIds[20] = 0x2ab0def7b5614da9L;
    myConceptBehaviorIds[21] = 0x2ab0def7b5614f40L;
    myConceptBehaviorIds[22] = 0x2ab0def7b5614f41L;
    myConceptBehaviorIds[23] = 0x2ab0def7b5614f42L;
    myConceptBehaviorIds[24] = 0x2ab0def7b5614f43L;
    myConceptBehaviorIds[25] = 0x2ab0def7b561c82dL;
    myConceptBehaviorIds[26] = 0x32ccd531a47ba7f6L;
    myConceptBehaviorIds[27] = 0x332b7c31ccc227d8L;
    myConceptBehaviorIds[28] = 0x379454b04a7864c4L;
    myConceptBehaviorIds[29] = 0x379454b04a788182L;
    myConceptBehaviorIds[30] = 0x43bfda4b30dad767L;
    myConceptBehaviorIds[31] = 0x4975e670253faacbL;
    myConceptBehaviorIds[32] = 0x4975e670253faaccL;
    myConceptBehaviorIds[33] = 0x4975e670253faacdL;
    myConceptBehaviorIds[34] = 0x4975e670253faaceL;
    myConceptBehaviorIds[35] = 0x53c2c23e11d33879L;
    myConceptBehaviorIds[36] = 0x53c2c23e11d53505L;
    myConceptBehaviorIds[37] = 0x53e32d0c67b45650L;
    myConceptBehaviorIds[38] = 0x53e32d0c67b4d50bL;
    myConceptBehaviorIds[39] = 0x618424b489a2abd4L;
    myConceptBehaviorIds[40] = 0x618424b489a2abd5L;
    myConceptBehaviorIds[41] = 0x618424b489a3bb71L;
    myConceptBehaviorIds[42] = 0x618424b489a3cd9eL;
    myConceptBehaviorIds[43] = 0x618424b489a3cd9fL;
    myConceptBehaviorIds[44] = 0x618424b489a40ba1L;
    myConceptBehaviorIds[45] = 0x618424b489a43df6L;
    myConceptBehaviorIds[46] = 0x6b36268ffc4fb929L;
    myConceptBehaviorIds[47] = 0x7f13d3cac4f69cb6L;
    myConceptBehaviorIds[48] = 0x7f13d3cac4fa27ddL;
    myConceptBehaviorIds[49] = 0x7f13d3cac51bb111L;
    myConceptBehaviorIds[50] = 0x7f13d3cac51bb9fbL;
    myConceptBehaviorIds[51] = 0x7f13d3cac51bce0cL;
    myConceptBehaviorIds[52] = 0x7f13d3cac51bd8d0L;
    myConceptBehaviorIds[53] = 0x7f13d3cac51d60bfL;
    myConceptBehaviorIds[54] = 0x7f13d3cac51e06bcL;
    myConceptBehaviorIds[55] = 0x7f13d3cac51f62a7L;
    myConceptBehaviorIds[56] = 0x7f13d3cac5200080L;
    myConceptBehaviorIds[57] = 0x7f13d3cac52c7b77L;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myProgram__BehaviorDescriptor;
      case 1:
        return myExpression__BehaviorDescriptor;
      case 2:
        return myStatement__BehaviorDescriptor;
      case 3:
        return myStatementList__BehaviorDescriptor;
      case 4:
        return myFalse__BehaviorDescriptor;
      case 5:
        return myTrue__BehaviorDescriptor;
      case 6:
        return myBinaryOperation__BehaviorDescriptor;
      case 7:
        return myAndExpression__BehaviorDescriptor;
      case 8:
        return myEqualsTo__BehaviorDescriptor;
      case 9:
        return myGreaterThan__BehaviorDescriptor;
      case 10:
        return myLessThan__BehaviorDescriptor;
      case 11:
        return myGreaterEqualsThan__BehaviorDescriptor;
      case 12:
        return myLessEqualThan__BehaviorDescriptor;
      case 13:
        return myComparision__BehaviorDescriptor;
      case 14:
        return myVariableAssignment__BehaviorDescriptor;
      case 15:
        return myColor__BehaviorDescriptor;
      case 16:
        return myRed__BehaviorDescriptor;
      case 17:
        return myBlue__BehaviorDescriptor;
      case 18:
        return myGreen__BehaviorDescriptor;
      case 19:
        return myBlack__BehaviorDescriptor;
      case 20:
        return myDirection__BehaviorDescriptor;
      case 21:
        return myNorth__BehaviorDescriptor;
      case 22:
        return mySouth__BehaviorDescriptor;
      case 23:
        return myEast__BehaviorDescriptor;
      case 24:
        return myWest__BehaviorDescriptor;
      case 25:
        return myModOperation__BehaviorDescriptor;
      case 26:
        return myVariableName__BehaviorDescriptor;
      case 27:
        return myProcedureInvocation__BehaviorDescriptor;
      case 28:
        return myRepeatStatement__BehaviorDescriptor;
      case 29:
        return myWhileStatement__BehaviorDescriptor;
      case 30:
        return myRemoveColor__BehaviorDescriptor;
      case 31:
        return myPlusOperation__BehaviorDescriptor;
      case 32:
        return myDivOperation__BehaviorDescriptor;
      case 33:
        return myMulOperation__BehaviorDescriptor;
      case 34:
        return myIntegerOperation__BehaviorDescriptor;
      case 35:
        return myBinaryLike__BehaviorDescriptor;
      case 36:
        return myVariableReference__BehaviorDescriptor;
      case 37:
        return myPutColor__BehaviorDescriptor;
      case 38:
        return myMoveClaw__BehaviorDescriptor;
      case 39:
        return myBooleanType__BehaviorDescriptor;
      case 40:
        return myType__BehaviorDescriptor;
      case 41:
        return myLogicalOperation__BehaviorDescriptor;
      case 42:
        return myOrExpression__BehaviorDescriptor;
      case 43:
        return myUnaryNot__BehaviorDescriptor;
      case 44:
        return myParenthesisExpression__BehaviorDescriptor;
      case 45:
        return myIntegerLiteral__BehaviorDescriptor;
      case 46:
        return myIfElseStatement__BehaviorDescriptor;
      case 47:
        return myFunctionInvocation__BehaviorDescriptor;
      case 48:
        return myRoutineInvocation__BehaviorDescriptor;
      case 49:
        return myNotEqualsTo__BehaviorDescriptor;
      case 50:
        return myPowOperation__BehaviorDescriptor;
      case 51:
        return myDiffOperation__BehaviorDescriptor;
      case 52:
        return myCanMoveClaw__BehaviorDescriptor;
      case 53:
        return myHasColor__BehaviorDescriptor;
      case 54:
        return myStonesQuantity__BehaviorDescriptor;
      case 55:
        return myBoardDefinition__BehaviorDescriptor;
      case 56:
        return myCellDefinition__BehaviorDescriptor;
      case 57:
        return myBoardRowDefinition__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
